"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.verifySmsOTP = exports.sendSmsOTP = void 0;
const vonage_1 = require("../config/vonage");
// G·ª≠i OTP
const sendSmsOTP = (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const { phone } = req.body;
        if (!phone) {
            return res.status(400).json({ success: false, message: "Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i." });
        }
        const otp = Math.floor(100000 + Math.random() * 900000).toString();
        vonage_1.otpMap.set(phone, otp);
        console.log(`üì© G·ª≠i OTP ${otp} ƒë·∫øn s·ªë: ${phone}`);
        yield vonage_1.vonage.sms.send({
            to: phone,
            from: process.env.VONAGE_FROM || "Style For You",
            text: `M√£ OTP Style For You c·ªßa b·∫°n l√†: ${otp}`,
        });
        return res.json({ success: true, message: "ƒê√£ g·ª≠i OTP qua SMS." });
    }
    catch (error) {
        return res.status(500).json({
            success: false,
            message: "G·ª≠i SMS OTP th·∫•t b·∫°i.",
            error: error.message || "L·ªói kh√¥ng x√°c ƒë·ªãnh.",
        });
    }
});
exports.sendSmsOTP = sendSmsOTP;
// X√°c minh OTP
const verifySmsOTP = (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const { phone, otp } = req.body;
        if (!phone || !otp) {
            return res.status(400).json({ success: false, message: "Thi·∫øu s·ªë ƒëi·ªán tho·∫°i ho·∫∑c m√£ OTP." });
        }
        const savedOTP = vonage_1.otpMap.get(phone);
        if (!savedOTP) {
            return res.status(400).json({ success: false, message: "OTP kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ h·∫øt h·∫°n." });
        }
        if (otp !== savedOTP) {
            return res.status(401).json({ success: false, message: "M√£ OTP kh√¥ng ch√≠nh x√°c." });
        }
        vonage_1.otpMap.delete(phone);
        return res.json({ success: true, message: "X√°c minh OTP th√†nh c√¥ng." });
    }
    catch (error) {
        return res.status(500).json({
            success: false,
            message: "L·ªói x√°c minh OTP.",
            error: error.message || "L·ªói kh√¥ng x√°c ƒë·ªãnh.",
        });
    }
});
exports.verifySmsOTP = verifySmsOTP;
