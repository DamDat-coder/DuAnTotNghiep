import { Request, Response } from "express";
import ReviewModel from "../models/review.model";
import OrderModel from "../models/order.model";
import UserModel from "../models/user.model";
import { AuthenticatedRequest } from "../middlewares/auth.middleware";
import mongoose from "mongoose";

const SPAM_KEYWORDS = ["xxx", "l·ª´a ƒë·∫£o", "qu·∫£ng c√°o", "viagra", "hack", "free ti·ªÅn"];
export const createReview = async (req: AuthenticatedRequest, res: Response) => {
  try {
    const userId = req.user?.userId;
    const { productId, content, rating } = req.body;

    if (!userId || !productId || !content || !rating) {
      return res.status(400).json({ success: false, message: "Thi·∫øu th√¥ng tin review." });
    }

    const order = await OrderModel.findOne({
      userId: userId,
      status: "delivered",
      "items.productId": new mongoose.Types.ObjectId(productId),
    });

    if (!order) {
      return res.status(403).json({
        success: false,
        message: "B·∫°n ch·ªâ c√≥ th·ªÉ ƒë√°nh gi√° khi ƒë√£ mua v√† nh·∫≠n h√†ng s·∫£n ph·∫©m n√†y.",
      });
    }

    const existingReview = await ReviewModel.findOne({ userId, productId });
    if (existingReview) {
      return res.status(400).json({
        success: false,
        message: "B·∫°n ƒë√£ ƒë√°nh gi√° s·∫£n ph·∫©m n√†y r·ªìi.",
      });
    }

    let isSpam = false;
    for (const keyword of SPAM_KEYWORDS) {
      if (content.toLowerCase().includes(keyword.toLowerCase())) {
        isSpam = true;
        break;
      }
    }

    let status: "approved" | "spam" = "approved";
    let warning = "";

    if (isSpam) {
      status = "spam";

      // ƒê·∫øm s·ªë review ƒë√£ b·ªã spam tr∆∞·ªõc ƒë√≥
      const spamCount = await ReviewModel.countDocuments({
        userId,
        status: "spam",
      });

      const totalSpam = spamCount + 1; // t√≠nh c·∫£ review hi·ªán t·∫°i

      if (totalSpam === 2) {
        warning = "‚ö†Ô∏è B·∫°n ƒë√£ b·ªã ƒë√°nh d·∫•u spam 2 l·∫ßn. N·∫øu ti·∫øp t·ª•c, t√†i kho·∫£n s·∫Ω b·ªã kh√≥a.";
      } else if (totalSpam >= 3) {
        await UserModel.findByIdAndUpdate(userId, { is_active: false });
        warning = "üö´ T√†i kho·∫£n ƒë√£ b·ªã kh√≥a v√¨ spam qu√° nhi·ªÅu.";
      }
    }

    const review = await ReviewModel.create({
      userId,
      productId,
      content,
      rating,
      status,
    });

    return res.status(201).json({
      success: true,
      message: "ƒê√£ g·ª≠i ƒë√°nh gi√°.",
      data: review,
      ...(warning && { warning }),
    });
  } catch (error) {
    console.error("L·ªói t·∫°o review:", error);
    return res.status(500).json({ success: false, message: "L·ªói m√°y ch·ªß." });
  }
};
export const getProductReviews = async (req: Request, res: Response) => {
  try {
    const productId = req.params.productId;
    const reviews = await ReviewModel.find({
      productId,
      status: "approved",
    })
      .populate("userId", "name")
      .sort({ createdAt: -1 });

    res.status(200).json({ success: true, data: reviews });
  } catch (error) {
    console.error("L·ªói khi l·∫•y ƒë√°nh gi√°:", error);
    res.status(500).json({ success: false, message: "L·ªói m√°y ch·ªß." });
  }
};

export const getAllReviews = async (req: Request, res: Response) => {
  try {
    const reviews = await ReviewModel.find()
      .populate("userId", "name email")
      .populate("productId", "name");

    res.status(200).json({ success: true, data: reviews });
  } catch (error) {
    console.error("L·ªói khi l·∫•y t·∫•t c·∫£ ƒë√°nh gi√°:", error);
    res.status(500).json({ success: false, message: "L·ªói m√°y ch·ªß." });
  }
};

export const updateReviewStatus = async (req: Request, res: Response) => {
  try {
    const { id } = req.params;
    const { status } = req.body;

    if (!["approved", "spam"].includes(status)) {
      return res.status(400).json({ success: false, message: "Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá." });
    }

    const updated = await ReviewModel.findByIdAndUpdate(
      id,
      { status },
      { new: true }
    );

    if (!updated) {
      return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y ƒë√°nh gi√°." });
    }

    res.status(200).json({ success: true, message: "C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng.", data: updated });
  } catch (error) {
    console.error("L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë√°nh gi√°:", error);
    res.status(500).json({ success: false, message: "L·ªói m√°y ch·ªß." });
  }
};
